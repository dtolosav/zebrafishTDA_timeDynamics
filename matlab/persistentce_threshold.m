%{

Significance through analysis of spurious feature distribution:

Version 1:
We pool all the persistence lengths from all time frames for 50 simulations (wild type, dense Xantophores) and 
compute the corresponding “survival function” (the probability that features have a
persistence larger than a given fixed value). We produce a figure that illustrates this survival function, 
where the y-axis values are shown in logarithmic scale and represent the proportion of features with persistence 
size larger than the corresponding persistence length on the x-axis. We expect the emergence of a plateau which 
corresponds to the transition from spurious to significant topological features of interest.
We similarly compute the survival function corresponding to null model frames. 
The survival functions for the frames generated by the null model and the Volkening simulations are expected to 
have considerably different shapes.
We expect to see very few 1-dimensional features with a persistence level in some interval that are generated by 
the random filament network in the null model.
We should also include the distribution of topological features from Volkening simulations if we remove the most 
persistent features in each persistence diagram. This removal of points ensures that we are not including topological 
features that have emerged from the spurious feature cloud, while also including noisy effects missed in the null model. 
Note that this assumes that there are relatively few significant topological features.

This procedure will give us a (range of) persistence threshold(s) that we can apply to all time frames. This is probably 
not the right thing to do, since the definition of a stripe should depend on context: a not-so-dense stripe in a very 
empty domain should be a stripe, while the sae configuration in a more populous domain should not be a stripe. 
This takes us to version 2.

Version 2:
We pool all the persistence lengths from each time frame for 50 simulations (wild type, dense Xantophores) and compute 
the corresponding “survival function” for each time frame. For each time frame, we expect the emergence of a plateau 
which corresponds to the transition from spurious to significant topological features of interest.
We similarly compute the survival function corresponding to null model frames. The survival functions for the frames 
generated by the null model and the Volkening simulations are expected to have considerably different shapes.
We expect to see very few 1-dimensional features with a persistence level in some interval that are generated by the 
random filament network in the null model.
We should also include the distribution of topological features from Volkening simulations if we remove the most 
persistent features in each persistence diagram. This removal of points ensures that we are not including topological 
features that have emerged from the spurious feature cloud, while also including noisy effects missed in the null model.
This procedure will produce a persistence threshold p(t), which is a function of time t.

%}
%_______________________________________________________________________________________________________________
%________________________________________       CODE 		____________________________________________________
%_______________________________________________________________________________________________________________
%{

%xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                                                                                        
%xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

██    ██ ███████ ██████  ███████ ██  ██████  ███    ██      ██ 
██    ██ ██      ██   ██ ██      ██ ██    ██ ████   ██     ███ 
██    ██ █████   ██████  ███████ ██ ██    ██ ██ ██  ██      ██ 
 ██  ██  ██      ██   ██      ██ ██ ██    ██ ██  ██ ██      ██ 
  ████   ███████ ██   ██ ███████ ██  ██████  ██   ████      ██ 

%xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                                                                                        
%xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                                               

%}

% Version 1
% 
% Step 1: Load barcodes for simulations 1-50 (wild type, XanC)
%
% load barcodes for all times for all 50 WT simulations, XanC.
barcodes_WT=cell(50,46,2);  % format is {sim_number , time_point , dimension}
cell_type ="XanC";
for sim_number = 1 : 50
	% SOME FILES ARE MISSING FOR THE EARLIEST TIMES, BECAUSE THERE ARE NO BARS ON THOSE TIMES
	for i = 1:46
		for dimension = 0:1
			try
				input_file = sprintf('barcodes/sim%d/%s/PD_%ssim%dtime%d_dim%d', sim_number,cell_type , cell_type,sim_number, i, dimension);
				[barcodes_WT{sim_number, i, dimension+1}, ~, ~]= importdata(input_file);
				if length(barcodes_WT{sim_number, i, dimension+1}) == 0
					barcodes_WT{sim_number , i , dimension} = [0 0];
				end
			catch
				try
					input_file = sprintf('barcodes/sim%d/%s/BC_%ssim%dtime%d_dim%d', sim_number,cell_type , cell_type,sim_number, i, dimension);
					[barcodes_WT{sim_number , i , dimension+1}, ~, ~]= importdata(input_file);
					if length(barcodes_WT{sim_number , i , dimension+1}) == 0
						barcodes_WT{sim_number , i , dimension+1} = [0 0];
					end
				catch
					input_file = sprintf('barcodes/sim%d/%s/PD_%ssim%dtime%d_dim%d', sim_number,cell_type , cell_type,sim_number, i, dimension);
					disp(['Could not find file: ',input_file]);
					barcodes_WT{sim_number , i , dimension+1}= [0 0];
				end
			end
		end
	end
end
% Step 2: Compute persistences for all barcodes and pool them together in a single vector. Do the same for the top 95% 
% of persistences on each time_point. Do the same for persistences after knocking out the most persistent feature on each time_pt,
% this amounts to knocking out the largest loop and the infinite connected component.
%
persistences_WT = cell(50,46,2);
persistences_WT_95 = cell(50,46,2);
per_vectors=cell(1,2); % pool persistences together in a vector, one for dimension 0 and one for dimension 1.
per_vectors{1} = [];
per_vectors{2} = [];
per_vectors_95=cell(1,2); % pool persistences below 95 percentile together in a vector, one for dimension 0 and one for dimension 1.
per_vectors_95{1} = [];
per_vectors_95{2} = [];
per_vectors_exclude_max=cell(1,2); % knock out most persistent feature, then pool in a vector, one for dimension 0 and one for dimension 1.
per_vectors_exclude_max{1} = [];
per_vectors_exclude_max{2} = [];
for sim_number = 1:50
	for time_pt = 1:46
		for dimension = 0:1
			if isempty(barcodes_WT{sim_number , time_pt , dimension +1})
				barcodes_WT{sim_number , time_pt , dimension +1} = [0 0];
			end
			persistences_WT{sim_number,time_pt, dimension+1} = barcodes_WT{sim_number,time_pt, dimension+1}(:,2) - barcodes_WT{sim_number,time_pt, dimension+1}(:,1);
			p_95 = prctile(persistences_WT{sim_number,time_pt, dimension+1} , 95 ,"all");
			persistences_WT_95{sim_number,time_pt, dimension+1} = persistences_WT{sim_number,time_pt, dimension+1}(find(persistences_WT{sim_number,time_pt, dimension+1} < p_95));
			per_vectors{dimension+1} = [per_vectors{dimension+1} ; persistences_WT{sim_number,time_pt, dimension+1}]; 
			per_vectors_exclude_max{dimension+1} = [per_vectors_exclude_max{dimension+1} ; persistences_WT{sim_number,time_pt, dimension+1}(find(persistences_WT{sim_number,time_pt, dimension+1} ~= max(persistences_WT{sim_number,time_pt, dimension+1})))]; 
			per_vectors_95{dimension+1} = [per_vectors_95{dimension+1} ; persistences_WT_95{sim_number,time_pt, dimension+1}];			
		end
	end
end
% -----------------------------------------------------------------------------------------------------------------------
%
% Step 3: Define the survival function "survival(P)" (here P stands for persistence).
increment = 10;
eval_vec = 0 : increment : 800; % vector containing the values at which survival(P) is computed.
survival = zeros(2, length(eval_vec));
for i = 1 : length(eval_vec)
	survival(1,i) = length(find(per_vectors{1} > eval_vec(i)))/ length(find(per_vectors{1} ~= 0));
	survival(2,i) = length(find(per_vectors{2} > eval_vec(i)))/ length(find(per_vectors{2} ~= 0));
end
% Step 4: Load barcodes for the NULL simulations 1-50 and pool al persistence lengths in a vector.
barcodes_NULL = cell(50,46,2);
%for i
%	load("NULL_simulations/barcodes/*/*");
%end
persistences_NULL = cell(50,46,2);
per_vectors_NULL=cell(1,2); % pool persistences together in a vector, one for dimension 0 and one for dimension 1.
per_vectors_NULL{1} = [];
per_vectors_NULL{2} = [];
per_vectors_NULL_xmax=cell(1,2); % knock out most persistent feature, then pool in a vector, one for dimension 0 and one for dimension 1.
per_vectors_NULL_xmax{1} = [];
per_vectors_NULL_xmax{2} = [];
for sim_number = 1:50
	for time_pt = 1:46
		for dimension = 0:1
			if isempty(barcodes_NULL{sim_number , time_pt , dimension +1})
				barcodes_NULL{sim_number , time_pt , dimension +1} = [0 0];
			end
			persistences_NULL{sim_number,time_pt, dimension+1} = barcodes_NULL{sim_number,time_pt, dimension+1}(:,2) - barcodes_NULL{sim_number,time_pt, dimension+1}(:,1);
			per_vectors_NULL{dimension+1} = [per_vectors_NULL{dimension+1} ; persistences_NULL{sim_number,time_pt, dimension+1}]; 
			per_vectors_NULL_xmax{dimension+1} = [per_vectors_NULL_xmax{dimension+1} ; persistences_NULL{sim_number,time_pt, dimension+1}(find(persistences_NULL{sim_number,time_pt, dimension+1} ~= max(persistences_NULL{sim_number,time_pt, dimension+1})))]; 
		end
	end
end
% Step 5: Define the null survival function "survival_NULL(P)", and the null exclude max survival function "survival_NULL_xmax()".
survival_NULL = zeros(2, length(eval_vec));
survival_NULL_xmax = zeros(2, length(eval_vec));
for i = 1 : length(eval_vec)
	survival_NULL(1,i) = length(find(per_vectors_NULL{1} > eval_vec(i)))/ length(find(per_vectors_NULL{1} ~= 0));
	survival_NULL(2,i) = length(find(per_vectors_NULL{2} > eval_vec(i)))/ length(find(per_vectors_NULL{2} ~= 0));
	survival_NULL_xmax(1,i) = length(find(per_vectors_NULL_xmax{1} > eval_vec(i)))/ length(find(per_vectors_NULL_xmax{1} ~= 0));
	survival_NULL_xmax(2,i) = length(find(per_vectors_NULL_xmax{2} > eval_vec(i)))/ length(find(per_vectors_NULL_xmax{2} ~= 0));
end
% Step 6: Define the survival function of the 95 % less persistent features on the model "survival_95_(P)".
survival_95 = zeros(2, length(eval_vec));
for i = 1 : length(eval_vec)
	survival_95(1,i) = length(find(per_vectors_95{1} > eval_vec(i)))/ length(find(per_vectors_95{1} ~= 0));
	survival_95(2,i) = length(find(per_vectors_95{2} > eval_vec(i)))/ length(find(per_vectors_95{2} ~= 0));
end
% Step 7: Define the survival function "survival_exclude_max(P)".
survival_exclude_max = zeros(2, length(eval_vec));
for i = 1 : length(eval_vec)
	survival_exclude_max(1,i) = length(find(per_vectors_exclude_max{1} > eval_vec(i)))/ length(find(per_vectors_exclude_max{1} ~= 0));
	survival_exclude_max(2,i) = length(find(per_vectors_exclude_max{2} > eval_vec(i)))/ length(find(per_vectors_exclude_max{2} ~= 0));
end
%
% Step 8: Plot survival(P), null_survival(P) and survival_95_(P), survival_exclude_max(P).
%
% Plot for betti 0
B0 = figure;
plt = semilogy(eval_vec,survival(1,:), eval_vec , survival_exclude_max(1,:), eval_vec, survival_95(1,:), eval_vec , survival_NULL(1,:), eval_vec, survival_NULL_xmax(1,:),'LineWidth',2);
grid on;
legend("all","exclude max","<95 percentile","null", "null exclude max");
titulo= sprintf("Survival functions for Betti %d", 0);
%{
Caption:
Survival function, i.e.
proportion of features with persistence size larger than the corresponding persistence length on the x-axis, 
for the same simulations but excluding the maximum persistence at each time frame, for the  same simulations
but excluding the top 5% of features for each time, and for the null model frames. 
The y axis is on a log scale for ease in visualization.
%}
title(titulo,'FontSize', 24);
xlim([0 800]);
xlabel("persistence",'FontSize', 20);
ylabel("probability",'FontSize', 20);

% Plot for betti 1
B1 = figure;
plt = semilogy(eval_vec,survival(2,:), eval_vec , survival_exclude_max(2,:), eval_vec, survival_95(2,:), eval_vec ,survival_NULL(2,:), eval_vec, survival_NULL_xmax(2,:),'LineWidth',2);
grid on;
legend("all","exclude max","<95 percentile","null","null exclude max");
titulo= sprintf("Survival functions for Betti %d", 1);
title(titulo,'FontSize', 24);
xlim([0 800]);
xlabel("persistence",'FontSize', 20);
ylabel("probability",'FontSize', 20);


% Version 2 BETA
%xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
%xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

%██    ██ ███████ ██████  ███████ ██  ██████  ███    ██     ██████      ██████  ███████ ████████  █████  
%██    ██ ██      ██   ██ ██      ██ ██    ██ ████   ██          ██     ██   ██ ██         ██    ██   ██ 
%██    ██ █████   ██████  ███████ ██ ██    ██ ██ ██  ██      █████      ██████  █████      ██    ███████ 
% ██  ██  ██      ██   ██      ██ ██ ██    ██ ██  ██ ██     ██          ██   ██ ██         ██    ██   ██ 
%  ████   ███████ ██   ██ ███████ ██  ██████  ██   ████     ███████     ██████  ███████    ██    ██   ██ 
                                                                                                        
%xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                                                                                        
%xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

% Step 1: Load barcodes for a single simulation
%
% load barcodes for all times.
barcodes_WT=cell(46,2);  % format is {sim_number , time_point , dimension}
cell_type ="XanC";
sim_number = 30; % edit this line to change simulation
	% SOME FILES ARE MISSING FOR THE EARLIEST TIMES, BECAUSE THERE ARE NO BARS ON THOSE TIMES
for i = 1:46
	for dimension = 0:1
		try
			input_file = sprintf('barcodes/sim%d/%s/PD_%ssim%dtime%d_dim%d', sim_number,cell_type , cell_type,sim_number, i, dimension);
			[barcodes_WT{i, dimension+1}, ~, ~]= importdata(input_file);
			if length(barcodes_WT{i, dimension+1}) == 0
				barcodes_WT{i , dimension} = [0 0];
			end
		catch
			try
				input_file = sprintf('barcodes/sim%d/%s/BC_%ssim%dtime%d_dim%d', sim_number,cell_type , cell_type,sim_number, i, dimension);
				[barcodes_WT{i , dimension+1}, ~, ~]= importdata(input_file);
				if length(barcodes_WT{i , dimension+1}) == 0
					barcodes_WT{i , dimension+1} = [0 0];
				end
			catch
				input_file = sprintf('barcodes/sim%d/%s/PD_%ssim%dtime%d_dim%d', sim_number,cell_type , cell_type,sim_number, i, dimension);
				disp(['Could not find file: ',input_file]);
				barcodes_WT{ i , dimension+1}= [0 0];
			end
		end
	end
end
% Step 2: Compute persistences for all barcodes. Do the same for the top 95% 
% of persistences on each time_point. Do the same for persistences after knocking out the most persistent feature on each time_pt,
% this amounts to knocking out the largest loop and the infinite connected component.
%
persistences_WT = cell(46,2);
persistences_WT_95 = cell(46,2);
persistences_WT_xmax=cell(46,2); % knock out most persistent feature.

for time_pt = 1:46
	for dimension = 0:1
		if isempty(barcodes_WT{time_pt , dimension +1})
			barcodes_WT{ time_pt , dimension +1} = [0 0];
		end
		persistences_WT{time_pt, dimension+1} = barcodes_WT{time_pt, dimension+1}(:,2) - barcodes_WT{time_pt, dimension+1}(:,1);
		p_95 = prctile(persistences_WT{time_pt, dimension+1} , 95 ,"all");
		persistences_WT_95{time_pt, dimension+1} = persistences_WT{time_pt, dimension+1}(find(persistences_WT{time_pt, dimension+1} < p_95));
		persistences_WT_xmax{dimension+1} = persistences_WT{time_pt, dimension+1}(find(persistences_WT{time_pt, dimension+1} ~= max(persistences_WT{time_pt, dimension+1}))); 
	end
end
% -----------------------------------------------------------------------------------------------------------------------
%
% Step 3: Define the survival function "survival(P)" (here P stands for persistence).
increment = 10;
eval_vec = 0 : increment : 800; % vector containing the values at which survival(P) is computed.
survival = zeros(46,2, length(eval_vec)); % time, dimension, values
for thyme = 1:46
	for i = 1 : length(eval_vec)
		survival(thyme,1,i) = length(find(persistences_WT{thyme,1} > eval_vec(i)))/ length(find(persistences_WT{thyme,1} ~= 0));
		survival(thyme,2,i) = length(find(persistences_WT{thyme,2} > eval_vec(i)))/ length(find(persistences_WT{thyme,2} ~= 0));
	end
end
% Step 4: Load barcodes for the NULL simulations 1-50 and pool al persistence lengths in a vector.
%{
barcodes_NULL = cell(50,46,2);
for i = 1:50
	for thyme = 1:46
		for dimsion = 0:1
			try
				barfile =sprintf("NULL_simulations/barcodes/sim%d/BC_NULL_XanC_sim%d_time%d_dim%d", i, i, thyme, dimsion);
				%variable = sprintf("temp_var_%d",dimsion);
				load(barfile);
			catch
				disp(['Could not find file: ',barfile]);
				temp_var_0 =[];
				temp_var_1 =[];
			end
			if dimsion == 0
				barcodes_NULL{i, thyme, dimsion+1}=temp_var_0;
				try clear temp_var_0;
				end
			elseif dimsion == 1
				barcodes_NULL{i, thyme, dimsion+1}=temp_var_1;
				try clear temp_var_1;
				end
			end			
		end
	end
end
%}
persistences_NULL = cell(50,46,2);
persistences_NULL_xmax=cell(50,46,2); % knock out most persistent feature
for sim_number = 1:50
	for time_pt = 1:46
		for d = 0:1
			if isempty(barcodes_NULL{sim_number , time_pt , d+1})
				barcodes_NULL{sim_number , time_pt , d+1} = [0 0];
			end
			persistences_NULL{sim_number,time_pt, d+1} = barcodes_NULL{sim_number,time_pt, d+1}(:,2) - barcodes_NULL{sim_number,time_pt, d+1}(:,1);
			persistences_NULL_xmax{sim_number, time_pt, d+1} = persistences_NULL{sim_number,time_pt, d+1}(find(persistences_NULL{sim_number,time_pt, d+1} ~= max(persistences_NULL{sim_number,time_pt, dimension+1}))); 
		end
	end
end

% Step 5: Define the null survival function "survival_NULL(P)", and the null exclude max survival function "survival_NULL_xmax()".
% we will use NULL sim30 only
survival_NULL = zeros(46,2, length(eval_vec));
survival_NULL_xmax = zeros(46,2, length(eval_vec));
for thyme = 1:46
	for i = 1 : length(eval_vec)
		survival_NULL(thyme,1,i) = nnz(persistences_NULL{sim_number,thyme,1}( persistences_NULL{sim_number,thyme,1} > eval_vec(i) ))/ nnz(persistences_NULL{sim_number,thyme,1});
		survival_NULL(thyme,2,i) = nnz(persistences_NULL{sim_number,thyme,2}( persistences_NULL{sim_number,thyme,2} > eval_vec(i) ))/ nnz(persistences_NULL{sim_number,thyme,2});
		survival_NULL_xmax(thyme,1,i) = nnz(persistences_NULL_xmax{sim_number,thyme,1}( persistences_NULL_xmax{sim_number,thyme,1} > eval_vec(i) ))/ nnz(persistences_NULL_xmax{sim_number,thyme,1});
		survival_NULL_xmax(thyme,2,i) = nnz(persistences_NULL_xmax{sim_number,thyme,2}( persistences_NULL_xmax{sim_number,thyme,2} > eval_vec(i) ))/ nnz(persistences_NULL_xmax{sim_number,thyme,2});
	end
end


% Step 6: Define the survival function of the 95 % less persistent features on the model "survival_95_(P)".
survival_95 = zeros(46,2, length(eval_vec));
for thyme = 1:46
	for i = 1 : length(eval_vec)
		survival_95(thyme,1,i) = length(find(persistences_WT_95{thyme,1} > eval_vec(i)))/ length(find(persistences_WT_95{thyme,1} ~= 0));
		survival_95(thyme,2,i) = length(find(persistences_WT_95{thyme,2} > eval_vec(i)))/ length(find(persistences_WT_95{thyme,2} ~= 0));
	end
end
% Step 7: Define the survival function "survival_exclude_max(P)".
survival_exclude_max = zeros(46,2, length(eval_vec));
for thyme =1:46
	for i = 1 : length(eval_vec)
		survival_exclude_max(thyme,1,i) = length(find(persistences_WT_xmax{thyme,1} > eval_vec(i)))/ length(find(persistences_WT_xmax{thyme,1} ~= 0));
		survival_exclude_max(thyme,2,i) = length(find(persistences_WT_xmax{thyme,2} > eval_vec(i)))/ length(find(persistences_WT_xmax{thyme,2} ~= 0));
	end
end
%
% Step 8: Plot survival(P), null_survival(P) and survival_95_(P), survival_exclude_max(P).
%
%surfplots

% 	survivals!

temp_survival_0 = zeros(46,81);
for i = 1: 46
for j =1:81
temp_survival_0(i,j) = survival(i,1,j);
end
end
figure;
surf(eval_vec, 1:46 ,temp_survival_0);
set(gca, 'ZScale', 'log');
title("survival function sim30", "FontSize", 24);
title("survival function sim30 dim 0", "FontSize", 24);
xlabel("persistence",'FontSize', 20);
ylabel("time point",'FontSize', 20);
zlabel("probability (log scale)", "FontSize",20);

temp_survival_1 = zeros(46,81);
for i = 1: 46
for j =1:81
temp_survival_1(i,j) = survival(i,2,j);
end
end
figure;
surf(eval_vec, 1:46 ,temp_survival_1);
set(gca, 'ZScale', 'log');
title("survival function sim30 dim 1", "FontSize", 24);
xlabel("persistence",'FontSize', 20);
ylabel("time point",'FontSize', 20);
zlabel("probability (log scale)", "FontSize",20);

survivals xmax! SOMETHING IS WRONG HERE!!!!

temp_survival_0 = zeros(46,81);
for i = 1: 46
for j =1:81
temp_survival_0(i,j) = survival_exclude_max(i,1,j);
end
end
figure;
surf(eval_vec, 1:46 ,temp_survival_0);
set(gca, 'ZScale', 'log');
title("survival function sim30", "FontSize", 24);
title("survival function (drop max) sim30 dim 0", "FontSize", 24);
xlabel("persistence",'FontSize', 20);
ylabel("time point",'FontSize', 20);
zlabel("probability (log scale)", "FontSize",20);

temp_survival_1 = zeros(46,81);
for i = 1: 46
for j =1:81
temp_survival_1(i,j) = survival_exclude_max(i,2,j);
end
end
figure;
surf(eval_vec, 1:46 ,temp_survival_1);
set(gca, 'ZScale', 'log');
title("survival function (drop max) sim30 dim 1", "FontSize", 24);
xlabel("persistence",'FontSize', 20);
ylabel("time point",'FontSize', 20);
zlabel("probability (log scale)", "FontSize",20);


NULL functions!

temp_survival_0 = zeros(46,81);
for i = 1: 46
for j =1:81
temp_survival_0(i,j) = survival_NULL(i,1,j);
end
end
figure;
surf(eval_vec, 1:46 ,temp_survival_0);
set(gca, 'ZScale', 'log');
title("survival function NULLsim30 dim 0", "FontSize", 24);
xlabel("persistence",'FontSize', 20);
ylabel("time point",'FontSize', 20);
zlabel("probability (log scale)", "FontSize",20);

temp_survival_1 = zeros(46,81);
for i = 1: 46
for j =1:81
temp_survival_1(i,j) = survival_NULL(i,2,j);
end
end
figure;
surf(eval_vec, 1:46 ,temp_survival_1);
set(gca, 'ZScale', 'log');
title("survival function NULLsim30 dim 1", "FontSize", 24);
xlabel("persistence",'FontSize', 20);
ylabel("time point",'FontSize', 20);
zlabel("probability (log scale)", "FontSize",20);

NULL_xmax functions!

temp_survival_0 = zeros(46,81);
for i = 1: 46
for j =1:81
temp_survival_0(i,j) = survival_NULL_xmax(i,1,j);
end
end
figure;
surf(eval_vec, 1:46 ,temp_survival_0);
set(gca, 'ZScale', 'log');
title("survival function NULL drop max sim30 dim 0", "FontSize", 24);
xlabel("persistence",'FontSize', 20);
ylabel("time point",'FontSize', 20);
zlabel("probability (log scale)", "FontSize",20);

temp_survival_1 = zeros(46,81);
for i = 1: 46
for j =1:81
temp_survival_1(i,j) = survival_NULL_xmax(i,2,j);
end
end
figure;
surf(eval_vec, 1:46 ,temp_survival_1);
set(gca, 'ZScale', 'log');
title("survival function NULL drop max sim30 dim 1", "FontSize", 24);
xlabel("persistence",'FontSize', 20);
ylabel("time point",'FontSize', 20);
zlabel("probability (log scale)", "FontSize",20);


% ________________________________________________________________________
% 								THE HIKER
% ________________________________________________________________________
% Now we just need to plot this thing
% ________________________________________________________________________

p_thresh = zeros(46,1);
slopes = diff(transpose(temp_survival_0(:,:))); % each column is a time_pt, each row is a persistence

% identifying the plateaus

plats = cell(5,46); % columns are time_pt, rows are slots for plateaus
for thyme = 2:46
plat=[];
plat_counter = 1; % this is really off by one, meaning is overcounting by 1
	for j = 3 : 80
		if slopes(j,thyme) == 0
			plat = [plat j];
		elseif length(plat) > 3 % we are requiring our plateaus to be at least 5 consecutive identical values on the survival function
			plats{plat_counter,thyme} = plat;
			plat_counter = plat_counter + 1;
			plat=[];
		else
			plat=[];
		end
	end
end
len_plats = zeros(5,46);
per_ivals = cell(5,46);
for thyme = 2:46
	for k = 1: 5
		len_plats(k,thyme) = length(plats{k,thyme});
		if ~isempty(plats{k,thyme})
			per_ivals{k,thyme} = [eval_vec(plats{k,thyme}(1)) eval_vec(plats{k,thyme}(end))];
			p_thresh(thyme) = mean(per_ivals{1,thyme});
		end
	end
end

%______________________________________________________________________
% NEED TO DEFINE SUR AT THRESHOLDS!!!
%______________________________________________________________________


p_thresh_with_confidence = [p_thresh transpose(len_plats(1,:))];
p_thres_full_info = [p_thresh_with_confidence sur_at_thresholds]
% this is set up in such a way that the last plateau is not counted if it goes all the way to the end, so basically only plateaus
% that end are counted.

% ________________________________________________________________________



% Plot for betti 0
for thyme = 1:46
	figure;
	plt = semilogy(eval_vec,survival(thyme,1,:), eval_vec , survival_exclude_max(thyme,1,:), eval_vec, survival_95(thyme,1,:), eval_vec , survival_NULL(thyme,1,:), eval_vec, survival_NULL_xmax(thyme,1,:),'LineWidth',2);
	grid on;
	%{
	plt = plot(eval_vec,survival(1,:)*100, eval_vec , survival_exclude_max(1,:)*100, eval_vec, survival_95(1,:)*100, eval_vec , survival_NULL(1,:)*100, eval_vec, survival_NULL_xmax(1,:)*100,'LineWidth',2);
	ytickformat('percentage');
	%}
	grid on;
	legend("all","exclude max","<95 percentile","null", "null exclude max");
	titulo= sprintf("Survival functions for Betti %d, sim %d, time %d", 0, sim_number,thyme);
	title(titulo,'FontSize', 24);
	xlim([0 800]);
	xlabel("persistence",'FontSize', 20);
	ylabel("probability",'FontSize', 20);
end
% Plot for betti 1
B1 = figure;
plt = semilogy(eval_vec,survival(2,:), eval_vec , survival_exclude_max(2,:), eval_vec, survival_95(2,:), eval_vec ,survival_NULL(2,:), eval_vec, survival_NULL_xmax(2,:),'LineWidth',2);
%{
plt = plot(eval_vec,survival(1,:)*100, eval_vec , survival_exclude_max(1,:)*100, eval_vec, survival_95(1,:)*100, eval_vec , survival_NULL(1,:)*100, eval_vec, survival_NULL_xmax(1,:)*100,'LineWidth',2);
ytickformat('percentage');
%}
grid on;
legend("all","exclude max","<95 percentile","null","null exclude max");
titulo= sprintf("Survival functions for Betti %d, sim %d, all times", 1, sim_number);
title(titulo,'FontSize', 24);
xlim([0 800]);
xlabel("persistence",'FontSize', 20);
ylabel("probability",'FontSize', 20);


%{
%xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                                                                                        
%xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

██    ██ ███████ ██████  ███████ ██  ██████  ███    ██     ██████  
██    ██ ██      ██   ██ ██      ██ ██    ██ ████   ██          ██ 
██    ██ █████   ██████  ███████ ██ ██    ██ ██ ██  ██      █████  
 ██  ██  ██      ██   ██      ██ ██ ██    ██ ██  ██ ██          ██ 
  ████   ███████ ██   ██ ███████ ██  ██████  ██   ████     ██████  
                                                                   
%xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                                                                                        
%xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx                                                                   
%}




% Version 3 : ONE SIM ONLY

% Step 1: Load barcodes for a simulation (wild type, XanC)
%
% load barcodes for all times.
barcodes_WT=cell(46,2);  % format is {sim_number , time_point , dimension}
cell_type ="XanC";
sim_number = 30; % edit this line to change simulation
	% SOME FILES ARE MISSING FOR THE EARLIEST TIMES, BECAUSE THERE ARE NO BARS ON THOSE TIMES
for i = 1:46
	for dimension = 0:1
		try
			input_file = sprintf('barcodes/sim%d/%s/PD_%ssim%dtime%d_dim%d', sim_number,cell_type , cell_type,sim_number, i, dimension);
			[barcodes_WT{i, dimension+1}, ~, ~]= importdata(input_file);
			if length(barcodes_WT{i, dimension+1}) == 0
				barcodes_WT{i , dimension} = [0 0];
			end
		catch
			try
				input_file = sprintf('barcodes/sim%d/%s/BC_%ssim%dtime%d_dim%d', sim_number,cell_type , cell_type,sim_number, i, dimension);
				[barcodes_WT{i , dimension+1}, ~, ~]= importdata(input_file);
				if length(barcodes_WT{i , dimension+1}) == 0
					barcodes_WT{i , dimension+1} = [0 0];
				end
			catch
				input_file = sprintf('barcodes/sim%d/%s/PD_%ssim%dtime%d_dim%d', sim_number,cell_type , cell_type,sim_number, i, dimension);
				disp(['Could not find file: ',input_file]);
				barcodes_WT{ i , dimension+1}= [0 0];
			end
		end
	end
end
% Step 2: Compute persistences for all barcodes and pool them together in a single vector. Do the same for the top 95% 
% of persistences on each time_point. Do the same for persistences after knocking out the most persistent feature on each time_pt,
% this amounts to knocking out the largest loop and the infinite connected component.
%
persistences_WT = cell(46,2);
persistences_WT_95 = cell(46,2);
per_vectors=cell(1,2); % pool persistences together in a vector, one for dimension 0 and one for dimension 1.
per_vectors{1} = [];
per_vectors{2} = [];
per_vectors_95=cell(1,2); % pool persistences below 95 percentile together in a vector, one for dimension 0 and one for dimension 1.
per_vectors_95{1} = [];
per_vectors_95{2} = [];
per_vectors_exclude_max=cell(1,2); % knock out most persistent feature, then pool in a vector, one for dimension 0 and one for dimension 1.
per_vectors_exclude_max{1} = [];
per_vectors_exclude_max{2} = [];

for time_pt = 1:46
	for dimension = 0:1
		if isempty(barcodes_WT{time_pt , dimension +1})
			barcodes_WT{ time_pt , dimension +1} = [0 0];
		end
		persistences_WT{time_pt, dimension+1} = barcodes_WT{time_pt, dimension+1}(:,2) - barcodes_WT{time_pt, dimension+1}(:,1);
		p_95 = prctile(persistences_WT{time_pt, dimension+1} , 95 ,"all");
		persistences_WT_95{time_pt, dimension+1} = persistences_WT{time_pt, dimension+1}(find(persistences_WT{time_pt, dimension+1} < p_95));
		per_vectors{dimension+1} = [per_vectors{dimension+1} ; persistences_WT{time_pt, dimension+1}]; 
		per_vectors_exclude_max{dimension+1} = [per_vectors_exclude_max{dimension+1} ; persistences_WT{time_pt, dimension+1}(find(persistences_WT{time_pt, dimension+1} ~= max(persistences_WT{time_pt, dimension+1})))]; 
		per_vectors_95{dimension+1} = [per_vectors_95{dimension+1} ; persistences_WT_95{time_pt, dimension+1}];			
	end
end

% -----------------------------------------------------------------------------------------------------------------------
%
% Step 3: Define the survival function "survival(P)" (here P stands for persistence).
increment = 10;
eval_vec = 0 : increment : 800; % vector containing the values at which survival(P) is computed.
survival = zeros(2, length(eval_vec));
for i = 1 : length(eval_vec)
	survival(1,i) = length(find(per_vectors{1} > eval_vec(i)))/ length(find(per_vectors{1} ~= 0));
	survival(2,i) = length(find(per_vectors{2} > eval_vec(i)))/ length(find(per_vectors{2} ~= 0));
end
% Step 4: Load barcodes for the NULL simulations 1-50 and pool all persistence lengths in a vector.
barcodes_NULL = cell(50,46,2);
for i = 1:50
	for thyme = 1:46
		for dimsion = 0:1
			try
				barfile =sprintf("NULL_simulations/barcodes/sim%d/BC_NULL_XanC_sim%d_time%d_dim%d", i, i, thyme, dimsion);
				%variable = sprintf("temp_var_%d",dimsion);
				load(barfile);
			catch
				disp(['Could not find file: ',barfile]);
				temp_var_0 =[];
				temp_var_1 =[];
			end
			if dimsion == 0
				barcodes_NULL{i, thyme, dimsion+1}=temp_var_0;
				try clear temp_var_0;
				end
			elseif dimsion == 1
				barcodes_NULL{i, thyme, dimsion+1}=temp_var_1;
				try clear temp_var_1;
				end
			end			
		end
	end
end
persistences_NULL = cell(50,46,2);
per_vectors_NULL=cell(1,2); % pool persistences together in a vector, one for dimension 0 and one for dimension 1.
per_vectors_NULL{1} = [];
per_vectors_NULL{2} = [];
per_vectors_NULL_xmax=cell(1,2); % knock out most persistent feature, then pool in a vector, one for dimension 0 and one for dimension 1.
per_vectors_NULL_xmax{1} = [];
per_vectors_NULL_xmax{2} = [];
for sim_number = 1:50
	for time_pt = 1:46
		for dimension = 0:1
			if isempty(barcodes_NULL{sim_number , time_pt , dimension +1})
				barcodes_NULL{sim_number , time_pt , dimension +1} = [0 0];
			end
			persistences_NULL{sim_number,time_pt, dimension+1} = barcodes_NULL{sim_number,time_pt, dimension+1}(:,2) - barcodes_NULL{sim_number,time_pt, dimension+1}(:,1);
			per_vectors_NULL{dimension+1} = [per_vectors_NULL{dimension+1} ; persistences_NULL{sim_number,time_pt, dimension+1}]; 
			per_vectors_NULL_xmax{dimension+1} = [per_vectors_NULL_xmax{dimension+1} ; persistences_NULL{sim_number,time_pt, dimension+1}(find(persistences_NULL{sim_number,time_pt, dimension+1} ~= max(persistences_NULL{sim_number,time_pt, dimension+1})))]; 
		end
	end
end
% Step 5: Define the null survival function "survival_NULL(P)", and the null exclude max survival function "survival_NULL_xmax()".
survival_NULL = zeros(2, length(eval_vec));
survival_NULL_xmax = zeros(2, length(eval_vec));
for i = 1 : length(eval_vec)
	survival_NULL(1,i) = length(find(per_vectors_NULL{1} > eval_vec(i)))/ length(find(per_vectors_NULL{1} ~= 0));
	survival_NULL(2,i) = length(find(per_vectors_NULL{2} > eval_vec(i)))/ length(find(per_vectors_NULL{2} ~= 0));
	survival_NULL_xmax(1,i) = length(find(per_vectors_NULL_xmax{1} > eval_vec(i)))/ length(find(per_vectors_NULL_xmax{1} ~= 0));
	survival_NULL_xmax(2,i) = length(find(per_vectors_NULL_xmax{2} > eval_vec(i)))/ length(find(per_vectors_NULL_xmax{2} ~= 0));
end
% Step 6: Define the survival function of the 95 % less persistent features on the model "survival_95_(P)".
survival_95 = zeros(2, length(eval_vec));
for i = 1 : length(eval_vec)
	survival_95(1,i) = length(find(per_vectors_95{1} > eval_vec(i)))/ length(find(per_vectors_95{1} ~= 0));
	survival_95(2,i) = length(find(per_vectors_95{2} > eval_vec(i)))/ length(find(per_vectors_95{2} ~= 0));
end
% Step 7: Define the survival function "survival_exclude_max(P)".
survival_exclude_max = zeros(2, length(eval_vec));
for i = 1 : length(eval_vec)
	survival_exclude_max(1,i) = length(find(per_vectors_exclude_max{1} > eval_vec(i)))/ length(find(per_vectors_exclude_max{1} ~= 0));
	survival_exclude_max(2,i) = length(find(per_vectors_exclude_max{2} > eval_vec(i)))/ length(find(per_vectors_exclude_max{2} ~= 0));
end
%
% Step 8: Plot survival(P), null_survival(P) and survival_95_(P), survival_exclude_max(P).
%
% Plot for betti 0
B0 = figure;
%{
plt = semilogy(eval_vec,survival(1,:), eval_vec , survival_exclude_max(1,:), eval_vec, survival_95(1,:), eval_vec , survival_NULL(1,:), eval_vec, survival_NULL_xmax(1,:),'LineWidth',2);
grid on;
%}

plt = plot(eval_vec,survival(1,:)*100, eval_vec , survival_exclude_max(1,:)*100, eval_vec, survival_95(1,:)*100, eval_vec , survival_NULL(1,:)*100, eval_vec, survival_NULL_xmax(1,:)*100,'LineWidth',2);
ytickformat('percentage');
grid on;
legend("all","exclude max","<95 percentile","null", "null exclude max");
titulo= sprintf("Survival functions for Betti %d, sim %d, all times", 0, sim_number);
%{
Caption:
Survival function, i.e.
proportion of features with persistence size larger than the corresponding persistence length on the x-axis, 
for the same simulations but excluding the maximum persistence at each time frame, for the  same simulations
but excluding the top 5% of features for each time, and for the null model frames. 
The y axis is on a log scale for ease in visualization.
%}
title(titulo,'FontSize', 24);
xlim([0 800]);
xlabel("persistence",'FontSize', 20);
ylabel("probability",'FontSize', 20);

% Plot for betti 1
B1 = figure;
%{
plt = semilogy(eval_vec,survival(2,:), eval_vec , survival_exclude_max(2,:), eval_vec, survival_95(2,:), eval_vec ,survival_NULL(2,:), eval_vec, survival_NULL_xmax(2,:),'LineWidth',2);
%}

plt = plot(eval_vec,survival(1,:)*100, eval_vec , survival_exclude_max(1,:)*100, eval_vec, survival_95(1,:)*100, eval_vec , survival_NULL(1,:)*100, eval_vec, survival_NULL_xmax(1,:)*100,'LineWidth',2);
ytickformat('percentage');
grid on;
legend("all","exclude max","<95 percentile","null","null exclude max");
titulo= sprintf("Survival functions for Betti %d, sim %d, all times", 1, sim_number);
title(titulo,'FontSize', 24);
xlim([0 800]);
xlabel("persistence",'FontSize', 20);
ylabel("probability",'FontSize', 20);